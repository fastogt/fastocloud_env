diff --git a/gst/tcp/gsthttpsink.c b/gst/tcp/gsthttpsink.c
new file mode 100644
index 0000000..d427e4b
--- /dev/null
+++ b/gst/tcp/gsthttpsink.c
@@ -0,0 +1,521 @@
+/* GStreamer
+ * Copyright (C) <1999> Erik Walthinsen <omega@cse.ogi.edu>
+ * Copyright (C) <2004> Thomas Vander Stichele <thomas at apestaart dot org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+/**
+ * SECTION:element-tcpserversink
+ * @title: tcpserversink
+ * @see_also: #multifdsink
+ *
+ * ## Example launch line (server):
+ * |[
+ * gst-launch-1.0 fdsrc fd=1 ! tcpserversink port=3000
+ * ]|
+ * ## Example launch line (client):
+ * |[
+ * gst-launch-1.0 tcpclientsrc port=3000 ! fdsink fd=2
+ * ]|
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+//#include <gst/gst-i18n-plugin.h>
+#include <string.h>             /* memset */
+
+#include "gsttcpelements.h"
+#include "gsthttpsink.h"
+
+#define TCP_BACKLOG             5
+
+#define TCP_DEFAULT_KEY "/fastocloud"
+
+GST_DEBUG_CATEGORY_STATIC (httpsink_debug);
+#define GST_CAT_DEFAULT (httpsink_debug)
+
+enum
+{
+  PROP_0,
+  PROP_HOST,
+  PROP_PORT,
+  PROP_CURRENT_PORT,
+  PROP_KEY
+};
+
+static void gst_http_sink_finalize (GObject * gobject);
+
+static void gst_http_sink_read_buffer (GstMultiSocketSink *sink, GstMultiHandleClient *client,
+                              gchar *buf, gssize size);
+
+static gboolean gst_http_sink_init_send (GstMultiHandleSink * this);
+static gboolean gst_http_sink_close (GstMultiHandleSink * this);
+static void gst_http_sink_removed (GstMultiHandleSink * sink,
+    GstMultiSinkHandle handle);
+
+static void gst_http_sink_set_property (GObject * object, guint prop_id,
+    const GValue * value, GParamSpec * pspec);
+static void gst_http_sink_get_property (GObject * object, guint prop_id,
+    GValue * value, GParamSpec * pspec);
+
+#define gst_http_sink_parent_class parent_class
+G_DEFINE_TYPE (GstHTTPSink, gst_http_sink,
+    GST_TYPE_MULTI_SOCKET_SINK);
+GST_ELEMENT_REGISTER_DEFINE_WITH_CODE (httpsink, "httpsink",
+    GST_RANK_NONE, GST_TYPE_HTTP_SINK, tcp_element_init (plugin));
+
+static void
+gst_http_sink_class_init (GstHTTPSinkClass * klass)
+{
+  GObjectClass *gobject_class;
+  GstElementClass *gstelement_class;
+  GstMultiHandleSinkClass *gstmultihandlesink_class;
+
+  gobject_class = (GObjectClass *) klass;
+  gstelement_class = (GstElementClass *) klass;
+  gstmultihandlesink_class = (GstMultiHandleSinkClass *) klass;
+
+  gobject_class->set_property = gst_http_sink_set_property;
+  gobject_class->get_property = gst_http_sink_get_property;
+  gobject_class->finalize = gst_http_sink_finalize;
+
+  /* FIXME 2.0: Rename this to bind-address, host does not make much
+   * sense here */
+  g_object_class_install_property (gobject_class, PROP_HOST,
+      g_param_spec_string ("host", "host", "The host/IP to listen on",
+          TCP_DEFAULT_HOST, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+  g_object_class_install_property (gobject_class, PROP_PORT,
+      g_param_spec_int ("port", "port",
+          "The port to listen to (0=random available port)",
+          0, TCP_HIGHEST_PORT, TCP_DEFAULT_PORT,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+  g_object_class_install_property (gobject_class, PROP_KEY,
+      g_param_spec_string ("key", "key", "The endpoint key",
+          TCP_DEFAULT_KEY, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+  /**
+   * GstHTTPSink:current-port:
+   *
+   * The port number the socket is currently bound to. Applications can use
+   * this property to retrieve the port number actually bound to in case
+   * the port requested was 0 (=allocate a random available port).
+   *
+   * Since: 1.0.2
+   **/
+  g_object_class_install_property (gobject_class, PROP_CURRENT_PORT,
+      g_param_spec_int ("current-port", "current-port",
+          "The port number the socket is currently bound to", 0,
+          TCP_HIGHEST_PORT, 0, G_PARAM_READABLE | G_PARAM_STATIC_STRINGS));
+
+  gst_element_class_set_static_metadata (gstelement_class,
+      "HTTP server sink", "Sink/Network",
+      "Send data as a server over the network via HTTP",
+      "Thomas Vander Stichele <thomas at apestaart dot org>");
+
+  gstmultihandlesink_class->init = gst_http_sink_init_send;
+  gstmultihandlesink_class->close = gst_http_sink_close;
+  gstmultihandlesink_class->removed = gst_http_sink_removed;
+
+  GST_DEBUG_CATEGORY_INIT (httpsink_debug, "httpsink", 0, "HTTP sink");
+}
+
+static void
+gst_http_sink_init (GstHTTPSink * this)
+{
+  this->server_port = TCP_DEFAULT_PORT;
+  /* should support as minimum 576 for IPV4 and 1500 for IPV6 */
+  /* this->mtu = 1500; */
+  this->host = g_strdup (TCP_DEFAULT_HOST);
+  this->key = g_strdup (TCP_DEFAULT_KEY);
+
+  this->server_socket = NULL;
+  GST_MULTI_SOCKET_SINK (this)->read_buffer = gst_http_sink_read_buffer;
+}
+
+static void
+gst_http_sink_finalize (GObject * gobject)
+{
+  GstHTTPSink *this = GST_HTTP_SINK (gobject);
+
+  GST_MULTI_SOCKET_SINK (this)->read_buffer = NULL;
+
+  if (this->server_socket)
+    g_object_unref (this->server_socket);
+  this->server_socket = NULL;
+  g_free (this->host);
+  this->host = NULL;
+  g_free (this->key);
+  this->key = NULL;
+
+  G_OBJECT_CLASS (parent_class)->finalize (gobject);
+}
+
+void gst_http_sink_read_buffer (GstMultiSocketSink *sink, GstMultiHandleClient *client,
+                                       gchar *buf, gssize size) {
+  gchar* raw = buf;
+  GstHTTPSink *hsink = GST_HTTP_SINK (sink);
+  gchar *reply;
+  GstBuffer *buffer;
+  gssize meth_len;
+  gssize url_len;
+  gchar* path;
+  if (!client->handle_write) {
+    return;
+  }
+
+  if (!buf) {
+    reply = "HTTP/1.1 401 Bad Request\nConnection: close\n\n";
+    goto done;
+  }
+
+  // Method
+  meth_len = strcspn(raw, " ");
+  if (strncmp(raw, "GET", 3) != 0) {
+    reply = "HTTP/1.1 401 Bad Request\nConnection: close\n\n";
+    goto done;
+  }
+
+  raw += meth_len + 1; // move past <SP>
+
+  // Request-URI
+  url_len = strcspn(raw, " ");
+  path = g_malloc(url_len + 1);
+  if (!path) {
+    reply = "HTTP/1.1 401 Bad Request\nConnection: close\n\n";
+    goto done;
+  }
+
+  memcpy(path, raw, url_len);
+  path[url_len] = '\0';
+  if (strcmp(hsink->key, path) != 0) {
+    reply = "HTTP/1.1 404 Not Found\nConnection: close\n\n";
+    g_free(path);
+    goto done;
+  }
+
+  GST_DEBUG_OBJECT (sink, "gst_http_sink_read_buffer http path %s", path);
+  g_free(path);
+
+  reply = "HTTP/1.1 200 OK\nContent-Type: video/mp2t\n\n";
+done:
+  buffer = gst_buffer_new_wrapped (reply, strlen(reply));
+  gst_buffer_ref (buffer);
+  client->sending = g_slist_append (client->sending, buffer);
+  client->handle_write = FALSE;
+}
+
+/* handle a read request on the server,
+ * which indicates a new client connection */
+static gboolean
+gst_http_sink_handle_server_read (GstHTTPSink * sink)
+{
+  GstMultiSinkHandle handle;
+  GSocket *client_socket;
+  GError *err = NULL;
+
+  /* wait on server socket for connections */
+  client_socket =
+      g_socket_accept (sink->server_socket, sink->element.cancellable, &err);
+  if (!client_socket)
+    goto accept_failed;
+
+  handle.socket = client_socket;
+  /* gst_multi_handle_sink_add does not take ownership of client_socket */
+  gst_multi_handle_sink_add (GST_MULTI_HANDLE_SINK (sink), handle);
+
+#ifndef GST_DISABLE_GST_DEBUG
+  {
+    GInetSocketAddress *addr =
+        G_INET_SOCKET_ADDRESS (g_socket_get_remote_address (client_socket,
+            NULL));
+    if (addr) {
+      gchar *ip =
+          g_inet_address_to_string (g_inet_socket_address_get_address (addr));
+
+      GST_DEBUG_OBJECT (sink, "added new client ip %s:%u with socket %p",
+          ip, g_inet_socket_address_get_port (addr), client_socket);
+
+      g_free (ip);
+      g_object_unref (addr);
+    } else {
+      /* This can happen when the client immediately closes the connection */
+      GST_DEBUG_OBJECT (sink, "added new client (no address) with socket %p",
+          client_socket);
+    }
+  }
+#endif
+
+  g_object_unref (client_socket);
+  return TRUE;
+
+  /* ERRORS */
+accept_failed:
+  {
+    GST_ELEMENT_ERROR (sink, RESOURCE, OPEN_WRITE, (NULL),
+        ("Could not accept client on server socket %p: %s",
+            sink->server_socket, err->message));
+    g_clear_error (&err);
+    return FALSE;
+  }
+}
+
+static void
+gst_http_sink_removed (GstMultiHandleSink * sink,
+    GstMultiSinkHandle handle)
+{
+  GError *err = NULL;
+
+  GST_DEBUG_OBJECT (sink, "closing socket");
+
+  if (!g_socket_close (handle.socket, &err)) {
+    GST_ERROR_OBJECT (sink, "Failed to close socket: %s", err->message);
+    g_clear_error (&err);
+  }
+}
+
+static gboolean
+gst_http_sink_socket_condition (GSocket * socket, GIOCondition condition,
+    GstHTTPSink * sink)
+{
+  if ((condition & G_IO_ERR)) {
+    goto error;
+  } else if ((condition & G_IO_IN) || (condition & G_IO_PRI)) {
+    if (!gst_http_sink_handle_server_read (sink))
+      return FALSE;
+  }
+
+  return TRUE;
+
+error:
+  GST_ELEMENT_ERROR (sink, RESOURCE, READ, (NULL),
+      ("client connection failed"));
+
+  return FALSE;
+}
+
+static void
+gst_http_sink_set_property (GObject * object, guint prop_id,
+    const GValue * value, GParamSpec * pspec)
+{
+  GstHTTPSink *sink;
+
+  sink = GST_HTTP_SINK (object);
+
+  switch (prop_id) {
+    case PROP_HOST:
+      if (!g_value_get_string (value)) {
+        g_warning ("host property cannot be NULL");
+        break;
+      }
+      g_free (sink->host);
+      sink->host = g_value_dup_string (value);
+      break;
+    case PROP_KEY:
+      if (!g_value_get_string (value)) {
+        g_warning ("key property cannot be NULL");
+        break;
+      }
+      g_free (sink->key);
+      sink->key = g_value_dup_string (value);
+      break;
+    case PROP_PORT:
+      sink->server_port = g_value_get_int (value);
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
+
+static void
+gst_http_sink_get_property (GObject * object, guint prop_id,
+    GValue * value, GParamSpec * pspec)
+{
+  GstHTTPSink *sink;
+
+  sink = GST_HTTP_SINK (object);
+
+  switch (prop_id) {
+    case PROP_HOST:
+      g_value_set_string (value, sink->host);
+      break;
+    case PROP_KEY:
+      g_value_set_string (value, sink->key);
+      break;
+    case PROP_PORT:
+      g_value_set_int (value, sink->server_port);
+      break;
+    case PROP_CURRENT_PORT:
+      g_value_set_int (value, g_atomic_int_get (&sink->current_port));
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
+
+
+/* create a socket for sending to remote machine */
+static gboolean
+gst_http_sink_init_send (GstMultiHandleSink * parent)
+{
+  GstHTTPSink *this = GST_HTTP_SINK (parent);
+  GError *err = NULL;
+  GList *addrs;
+  GList *cur_addr;
+  GSocketAddress *saddr;
+  gint bound_port;
+
+  addrs =
+      tcp_get_addresses (GST_ELEMENT (this), this->host,
+      this->element.cancellable, &err);
+  if (!addrs)
+    goto name_resolve;
+
+  /* iterate over addresses until one works */
+  cur_addr = addrs;
+  this->server_socket =
+      tcp_create_socket (GST_ELEMENT (this), &cur_addr, this->server_port,
+      &saddr, &err);
+  g_list_free_full (addrs, g_object_unref);
+
+  if (!this->server_socket)
+    goto no_socket;
+
+  GST_DEBUG_OBJECT (this, "opened sending server socket with socket %p",
+      this->server_socket);
+
+  g_socket_set_blocking (this->server_socket, FALSE);
+
+  /* bind it */
+  GST_DEBUG_OBJECT (this, "binding server socket to address");
+  if (!g_socket_bind (this->server_socket, saddr, TRUE, &err))
+    goto bind_failed;
+
+  g_object_unref (saddr);
+
+  GST_DEBUG_OBJECT (this, "listening on server socket");
+  g_socket_set_listen_backlog (this->server_socket, TCP_BACKLOG);
+
+  if (!g_socket_listen (this->server_socket, &err))
+    goto listen_failed;
+
+  GST_DEBUG_OBJECT (this, "listened on server socket %p", this->server_socket);
+
+  if (this->server_port == 0) {
+    saddr = g_socket_get_local_address (this->server_socket, NULL);
+    bound_port = g_inet_socket_address_get_port ((GInetSocketAddress *) saddr);
+    g_object_unref (saddr);
+  } else {
+    bound_port = this->server_port;
+  }
+
+  GST_DEBUG_OBJECT (this, "listening on port %d", bound_port);
+
+  g_atomic_int_set (&this->current_port, bound_port);
+
+  g_object_notify (G_OBJECT (this), "current-port");
+
+  this->server_source =
+      g_socket_create_source (this->server_socket,
+      G_IO_IN | G_IO_OUT | G_IO_PRI | G_IO_ERR | G_IO_HUP,
+      this->element.cancellable);
+  g_source_set_callback (this->server_source,
+      (GSourceFunc) gst_http_sink_socket_condition, gst_object_ref (this),
+      (GDestroyNotify) gst_object_unref);
+  g_source_attach (this->server_source, this->element.main_context);
+
+  return TRUE;
+
+  /* ERRORS */
+no_socket:
+  {
+    GST_ELEMENT_ERROR (this, RESOURCE, OPEN_READ, (NULL),
+        ("Failed to create socket: %s", err->message));
+    g_clear_error (&err);
+    return FALSE;
+  }
+name_resolve:
+  {
+    if (g_error_matches (err, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
+      GST_DEBUG_OBJECT (this, "Cancelled name resolution");
+    } else {
+      GST_ELEMENT_ERROR (this, RESOURCE, OPEN_READ, (NULL),
+          ("Failed to resolve host '%s': %s", this->host, err->message));
+    }
+    g_clear_error (&err);
+    return FALSE;
+  }
+bind_failed:
+  {
+    if (g_error_matches (err, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
+      GST_DEBUG_OBJECT (this, "Cancelled binding");
+    } else {
+      GST_ELEMENT_ERROR (this, RESOURCE, OPEN_READ, (NULL),
+          ("Failed to bind on host '%s:%d': %s", this->host, this->server_port,
+              err->message));
+    }
+    g_clear_error (&err);
+    g_object_unref (saddr);
+    gst_http_sink_close (GST_MULTI_HANDLE_SINK (&this->element));
+    return FALSE;
+  }
+listen_failed:
+  {
+    if (g_error_matches (err, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
+      GST_DEBUG_OBJECT (this, "Cancelled listening");
+    } else {
+      GST_ELEMENT_ERROR (this, RESOURCE, OPEN_READ, (NULL),
+          ("Failed to listen on host '%s:%d': %s", this->host,
+              this->server_port, err->message));
+    }
+    g_clear_error (&err);
+    gst_http_sink_close (GST_MULTI_HANDLE_SINK (&this->element));
+    return FALSE;
+  }
+}
+
+static gboolean
+gst_http_sink_close (GstMultiHandleSink * parent)
+{
+  GstHTTPSink *this = GST_HTTP_SINK (parent);
+
+  if (this->server_source) {
+    g_source_destroy (this->server_source);
+    g_source_unref (this->server_source);
+    this->server_source = NULL;
+  }
+
+  if (this->server_socket) {
+    GError *err = NULL;
+
+    GST_DEBUG_OBJECT (this, "closing socket");
+
+    if (!g_socket_close (this->server_socket, &err)) {
+      GST_ERROR_OBJECT (this, "Failed to close socket: %s", err->message);
+      g_clear_error (&err);
+    }
+    g_object_unref (this->server_socket);
+    this->server_socket = NULL;
+
+    g_atomic_int_set (&this->current_port, 0);
+    g_object_notify (G_OBJECT (this), "current-port");
+  }
+
+  return TRUE;
+}
diff --git a/gst/tcp/gsthttpsink.h b/gst/tcp/gsthttpsink.h
new file mode 100644
index 0000000..a9723dd
--- /dev/null
+++ b/gst/tcp/gsthttpsink.h
@@ -0,0 +1,79 @@
+/* GStreamer
+ * Copyright (C) <1999> Erik Walthinsen <omega@cse.ogi.edu>
+ * Copyright (C) <2004> Thomas Vander Stichele <thomas at apestaart dot org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+
+#ifndef __GST_HTTP_SINK_H__
+#define __GST_HTTP_SINK_H__
+
+
+#include <gst/gst.h>
+#include <gio/gio.h>
+
+G_BEGIN_DECLS
+
+#include "gstmultisocketsink.h"
+
+#define GST_TYPE_HTTP_SINK \
+  (gst_http_sink_get_type())
+#define GST_HTTP_SINK(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_HTTP_SINK,GstHTTPSink))
+#define GST_HTTP_SINK_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_HTTP_SINK,GstHTTPSinkClass))
+#define GST_IS_HTTP_SINK(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_HTTP_SINK))
+#define GST_IS_HTTP_SINK_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_HTTP_SINK))
+
+typedef struct _GstHTTPSink GstHTTPSink;
+typedef struct _GstHTTPSinkClass GstHTTPSinkClass;
+
+typedef enum {
+  GST_HTTP_SINK_OPEN             = (GST_ELEMENT_FLAG_LAST << 0),
+
+  GST_HTTP_SINK_FLAG_LAST        = (GST_ELEMENT_FLAG_LAST << 2)
+} GstHTTPSinkFlags;
+
+/**
+ * GstHTTPSink:
+ *
+ * Opaque data structure.
+ */
+struct _GstHTTPSink {
+  GstMultiSocketSink element;
+
+  /* server information */
+  int current_port;        /* currently bound-to port, or 0 */ /* ATOMIC */
+  int server_port;         /* port property */
+  gchar *host;             /* host property */
+  gchar *key;              /* key */
+
+  GSocket *server_socket;
+  GSource *server_source;
+};
+
+struct _GstHTTPSinkClass {
+  GstMultiSocketSinkClass parent_class;
+};
+
+GType gst_http_sink_get_type (void);
+
+G_END_DECLS
+
+#endif /* __GST_HTTP_SINK_H__ */
diff --git a/gst/tcp/gstmultihandlesink.c b/gst/tcp/gstmultihandlesink.c
index b7f76dd..c5d1805 100644
--- a/gst/tcp/gstmultihandlesink.c
+++ b/gst/tcp/gstmultihandlesink.c
@@ -540,6 +540,7 @@ gst_multi_handle_sink_client_init (GstMultiHandleClient * client,
   client->new_connection = TRUE;
   client->sync_method = sync_method;
   client->currently_removing = FALSE;
+  client->handle_write = TRUE;
 
   /* update start time */
   client->connect_time = g_get_real_time () * GST_USECOND;
diff --git a/gst/tcp/gstmultihandlesink.h b/gst/tcp/gstmultihandlesink.h
index 01ee54a..79335ea 100644
--- a/gst/tcp/gstmultihandlesink.h
+++ b/gst/tcp/gstmultihandlesink.h
@@ -172,6 +172,8 @@ typedef struct {
   guint64 avg_queue_size;
   guint64 first_buffer_ts;
   guint64 last_buffer_ts;
+  
+  gboolean handle_write;
 } GstMultiHandleClient;
 
 #define CLIENTS_LOCK_INIT(mhsink)       (g_rec_mutex_init(&(mhsink)->clientslock))
diff --git a/gst/tcp/gstmultisocketsink.c b/gst/tcp/gstmultisocketsink.c
index 56d99d8..d3e73dd 100644
--- a/gst/tcp/gstmultisocketsink.c
+++ b/gst/tcp/gstmultisocketsink.c
@@ -451,6 +451,7 @@ gst_multi_socket_sink_init (GstMultiSocketSink * this)
   this->cancellable = g_cancellable_new ();
   this->send_dispatched = DEFAULT_SEND_DISPATCHED;
   this->send_messages = DEFAULT_SEND_MESSAGES;
+  this->read_buffer = NULL;
 }
 
 static void
@@ -664,6 +665,12 @@ gst_multi_socket_sink_handle_client_read (GstMultiSocketSink * sink,
   } while (navail > 0);
   g_clear_error (&err);
 
+  if (ret) {
+    if (sink->read_buffer) {
+      sink->read_buffer(sink, mhclient, mem, maxmem);
+    }
+  }
+
   if (do_event) {
     if (ret) {
       GstBuffer *buf;
diff --git a/gst/tcp/gstmultisocketsink.h b/gst/tcp/gstmultisocketsink.h
index c89844d..9dded02 100644
--- a/gst/tcp/gstmultisocketsink.h
+++ b/gst/tcp/gstmultisocketsink.h
@@ -65,6 +65,8 @@ typedef struct {
 struct _GstMultiSocketSink {
   GstMultiHandleSink element;
 
+  void          (*read_buffer) (GstMultiSocketSink *sink, GstMultiHandleClient *client,
+                                gchar *buf, gssize size);
   /*< private >*/
   GMainContext *main_context;
   GCancellable *cancellable;
diff --git a/gst/tcp/gsttcpelements.h b/gst/tcp/gsttcpelements.h
index 4466083..4056973 100644
--- a/gst/tcp/gsttcpelements.h
+++ b/gst/tcp/gsttcpelements.h
@@ -36,6 +36,7 @@ GST_ELEMENT_REGISTER_DECLARE (tcpclientsink);
 GST_ELEMENT_REGISTER_DECLARE (tcpclientsrc);
 GST_ELEMENT_REGISTER_DECLARE (tcpserversink);
 GST_ELEMENT_REGISTER_DECLARE (tcpserversrc);
+GST_ELEMENT_REGISTER_DECLARE (httpsink);
 GST_ELEMENT_REGISTER_DECLARE (multifdsink);
 GST_ELEMENT_REGISTER_DECLARE (multisocketsink);
 
diff --git a/gst/tcp/gsttcpplugin.c b/gst/tcp/gsttcpplugin.c
index 723ae46..b51418c 100644
--- a/gst/tcp/gsttcpplugin.c
+++ b/gst/tcp/gsttcpplugin.c
@@ -33,6 +33,7 @@ plugin_init (GstPlugin * plugin)
   ret |= GST_ELEMENT_REGISTER (tcpclientsrc, plugin);
   ret |= GST_ELEMENT_REGISTER (tcpserversink, plugin);
   ret |= GST_ELEMENT_REGISTER (tcpserversrc, plugin);
+  ret |= GST_ELEMENT_REGISTER (httpsink, plugin);
 
 #ifdef HAVE_SYS_SOCKET_H
   ret |= GST_ELEMENT_REGISTER (multifdsink, plugin);
diff --git a/gst/tcp/meson.build b/gst/tcp/meson.build
index 98b9686..e035e06 100644
--- a/gst/tcp/meson.build
+++ b/gst/tcp/meson.build
@@ -4,6 +4,7 @@ tcp_sources = [
   'gstsocketsrc.c',
   'gsttcpclientsrc.c',
   'gsttcpclientsink.c',
+  'gsthttpsink.c',
   'gsttcpelements.c',
   'gsttcpserversrc.c',
   'gsttcpserversink.c',
diff --git a/scripts/dist-translations.py b/scripts/dist-translations.py
old mode 100755
new mode 100644
diff --git a/scripts/extract-release-date-from-doap-file.py b/scripts/extract-release-date-from-doap-file.py
old mode 100755
new mode 100644
diff --git a/scripts/gen-changelog.py b/scripts/gen-changelog.py
old mode 100755
new mode 100644
diff --git a/scripts/meson-pkg-config-file-fixup.py b/scripts/meson-pkg-config-file-fixup.py
old mode 100755
new mode 100644
diff --git a/scripts/update-orc-dist-files.py b/scripts/update-orc-dist-files.py
old mode 100755
new mode 100644
diff --git a/tests/examples/gl/cocoa/cocoa-videooverlay.m b/tests/examples/gl/cocoa/cocoa-videooverlay.m
old mode 100755
new mode 100644
